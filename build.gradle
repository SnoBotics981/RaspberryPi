// Do not mess with the following 6 lines
plugins {
  id 'com.github.johnrengelman.shadow' version '1.2.4'
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'war'


// This is where you select which operating system to build for.

// Uncomment the line below to build for windows
//ext.buildType = "windows"

// Uncomment the line below to build for a Raspberry Pi running raspbian
ext.buildType = "arm-raspbian"

// Uncomment the line below to build for an armhf device such as a Jetson or a Beaglebone Black
//ext.buildType = "armhf"

// Change the line below if you change the name of your main Java class
mainClassName = 'Main'
// Change the line below to change the name of the output jar
def projectName = 'CameraVision'

def home = System.getProperty("user.home")

// Various tasks defined in the dependencies file
apply from: 'dependencies.gradle'

repositories {
    mavenCentral()
    maven {
      url home + "/releases/maven/development/"
    }
    maven {
      url "http://first.wpi.edu/FRC/roborio/maven/release"
    }
}

dependencies {
  compile ntcoreDep()
  compile cscoreDep()
  compile 'org.opencv:opencv-java:3.1.0'
  compile 'org.eclipse.jetty:jetty-server:+'
  compile 'org.eclipse.jetty:jetty-servlet:+'
  compile 'commons-io:commons-io:+'
  compile 'org.json:json:+'
  compile 'net.engio:mbassador:+'
  compile 'de.neuland-bfi:jade4j:+'
  compile 'edu.wpi.first.wpilibj:wpilibj-java:+'
  compile 'edu.wpi.first.wpiutil:wpiutil-java:+'
  compile 'edu.wpi.first.ntcore:ntcore-java:+'
  providedCompile 'javax.el:javax.el-api:+'
  runtime 'edu.wpi.first.ntcore:ntcore-jni:+'
  runtime 'de.odysseus.juel:juel-impl:+'
  runtime 'de.odysseus.juel:juel-spi:+'
  testCompile 'junit:junit:4.12'
}

jar {
  baseName = projectName
}

shadowJar {
  baseName = projectName
}

distributions {
  main {
    baseName = projectName
    contents {
      from (openCvUnzipLocation) {
        exclude 'META-INF'
        exclude '**/MANIFEST.MF'
        into 'bin/'
      }
      from (ntcoreUnzipLocation) {
        exclude 'META-INF'
        exclude '**/MANIFEST.MF'
	into 'bin/'
      }
    }
  }
}

def outputDirectory = file("${rootDir}/output")

task writeExecuteScript() {
  dependsOn jar
  doLast {
    if (buildType == "windows") {
      def runFile = new File("${buildDir}/run${projectName}.bat")
      runFile.write "java -Djava.library.path=. -jar ${projectName}-all.jar"
    } else {
      def runFile = new File("${buildDir}/run${projectName}")
      runFile.write "java -Djava.library.path=. -jar ${projectName}-all.jar"
    }
  }
}

task copyToOutput(type: Copy) {
  dependsOn shadowJar
  dependsOn unzipFiles
  dependsOn writeExecuteScript
  destinationDir = outputDirectory
  from (file(shadowJar.archivePath)) {
  }
  from (openCvUnzipLocation) {
    exclude 'META-INF'
    exclude '**/MANIFEST.MF'
  }
  from (ntcoreUnzipLocation + "/linux/nativearm") {
  }
  if (buildType == "windows") {
    from (file("${buildDir}/run${projectName}.bat")) {
    }
  } else {
    from (file("${buildDir}/run${projectName}")) {
    }
  }
}

task zipOutput(type: Zip) {
  baseName = projectName
  duplicatesStrategy = 'exclude'
  dependsOn shadowJar
  dependsOn unzipFiles
  destinationDir = outputDirectory
  from (file(shadowJar.archivePath)) {
  }
  from (openCvUnzipLocation) {
    exclude 'META-INF'
    exclude '**/MANIFEST.MF'
  }
  if (buildType == "windows") {
    from (file("${buildDir}/run${projectName}.bat")) {
    }
  } else {
    from (file("${buildDir}/run${projectName}")) {
      fileMode 0777
    }
  }
}

test {
  testLogging {
    showStandardStreams = true
    exceptionFormat = 'full'
    events "standardOut", "started", "passed", "skipped", "failed"
  }
}

distZip.dependsOn unzipFiles
distTar.dependsOn unzipFiles

applicationDefaultJvmArgs = ["-Djava.library.path=${openCvUnzipLocation}"]

build.dependsOn copyToOutput
build.dependsOn zipOutput
run.dependsOn unzipFiles

clean {
    delete outputDirectory
}
