ext.ntcoreDep = { ->
    def classifier
    if (buildType == "windows") {
      classifier = "windows2015"
    } else if (buildType == "linux") {
      classifier = "desktop"
    } else {
      classifier = buildType
    }
    return "edu.wpi.first.wpilib.networktables.java:NetworkTables:+:$classifier"
}

ext.cscoreDep = { ->
    def classifier
    if (buildType == "windows") {
      classifier = "windows2015"
    } else {
      classifier = buildType
    }
    return "edu.wpi.cscore.java:cscore:+:$classifier"
}

ext.getOpenCvPlatformPackage = { module ->
  if (buildType == "windows") {
    if (System.getProperty("os.arch") == "amd64") {
      return "windows-x86_64_2015"
    } else {
      return "windows-x86_2015"
    }
  } else if (buildType == "linux") {
    if (System.getProperty("os.arch") == "amd64") {
      return "linux-x86_64"
    } else {
      return "linux-x86"
    }
  } else if (buildType == "armhf") {
    return "linux-armhf"
  } else if (buildType == "arm-raspbian") {
    if (module == "ntcore") {
      return "linuxnativearm"
    } else {
      return "linux-arm-raspbian"
    }
  } else {
    return buildType
  }
}

def getJNIpackage(module, pkg, version) {
  def classifier = getOpenCvPlatformPackage(module)
  def dependency = project.dependencies.create("${pkg}.$module:$module-jni:$version:$classifier@jar")
  def config = project.configurations.detachedConfiguration(dependency)
  config.setTransitive(false)
  return config.files[0].canonicalFile
}

task downloadOpenCv() {
    description = 'Downloads the OpenCV Native maven dependency.'
    group = 'WPILib'
    def depFolder = "$buildDir/dependencies"
    def cvZip = file("$depFolder/opencv.zip")
    outputs.file(cvZip)
    def armOpenCv

    doFirst {
        armOpenCv = getJNIpackage("opencv", "org", "3.1.0")
    }

    doLast {
        copy {
            from armOpenCv
            rename 'opencv(.+)', 'opencv.zip'
            into depFolder
        }
    }
}

ext.openCvUnzipLocation = "$buildDir/opencv"
ext.ntcoreUnzipLocation = "$buildDir/ntcore"

task downloadNtcoreJNI() {
    description = 'Downloads the Ntcore Native maven dependency.'
    group = 'WPILib'
    def depFolder = "$buildDir/dependencies"
    def ntZip = file("$depFolder/ntcore.zip")
    outputs.file(ntZip)
    def armOpenNt

    doFirst {
        armOpenNt = getJNIpackage("ntcore", "edu.wpi.first", "+")
    }

    doLast {
        copy {
            from armOpenNt
            rename 'ntcore(.+)', 'ntcore.zip'
            into depFolder
        }
    }
}

task unzipFiles() {
    description = 'Extract contents from all jar-packaged zip files'
    group = 'WPILib'
    dependsOn downloadNtcoreJNI
    dependsOn downloadOpenCv

    copy {
      from zipTree(downloadNtcoreJNI.outputs.files.singleFile)
      into ntcoreUnzipLocation
    }

    copy {
      from zipTree(downloadOpenCv.outputs.files.singleFile)
      into openCvUnzipLocation
    }
}
